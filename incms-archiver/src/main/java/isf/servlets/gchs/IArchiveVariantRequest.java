package isf.servlets.gchs;

import isf.servlets.*;

/**
 * Interface for Request to handle datatype 'ArchiveVariant'.
 * 
 * <p>This file was generated automatically by tools.genex.ExchangeDocumentGenerator 10.21.02
 * <br>by ARQv10 (Indra Software Labs)
 * <br>(c) 2000-2016 ARQv10 (Indra Software Labs)
 * 
 * <p>******************** DO NOT EDIT ********************</p>
 * 
 * <p>Source specification: </p><blockquote><xmp>
<?xml version="1.0" encoding="UTF-8"?><ArchiveVariant>
	<CodExecutionMode>(String) Execution mode</CodExecutionMode>
	<DestinationDBProfile>(String) Destination database profile</DestinationDBProfile>
	<IdEntity>(Long) Entity to achive identifier</IdEntity>
	<Condition>(String) SQL where condition to identify initial rows</Condition>
	<PreExecuteScript>(String) SQL script to run before actual archiving</PreExecuteScript>
	<IndDebug>(boolean)Indicates if debugging output is enabled</IndDebug>
</ArchiveVariant>
</xmp></blockquote>

 * @author pcal
 * 
 */
@javax.annotation.Generated(value = "tools.genex.ExchangeDocumentGenerator", date="2016-06-20", comments="Generated by isfv10-genex version 10.21.02 from ARQv10 (Indra Software Labs)")
public interface IArchiveVariantRequest
extends
	isf.servlets.Request,
	isf.servlets.IValidable
{
	
	// ****************************************************************************
	// * Methods
	// ****************************************************************************
	
	/**
	 * Gets the content of simple struct 'CodExecutionMode'.
	 * @return Execution mode.
	 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
	 */
	public abstract String getCodExecutionMode()
	throws isf.servlets.InvalidRequest;
	
	/**
	 * Checks if exists simple structure 'CodExecutionMode'.
	 * @return true if exists simple structure 'CodExecutionMode'; false if not.
	 */
	public abstract boolean existsCodExecutionMode();
	
	/**
	 * Gets the content of simple struct 'DestinationDBProfile'.
	 * @return Destination database profile.
	 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
	 */
	public abstract String getDestinationDBProfile()
	throws isf.servlets.InvalidRequest;
	
	/**
	 * Checks if exists simple structure 'DestinationDBProfile'.
	 * @return true if exists simple structure 'DestinationDBProfile'; false if not.
	 */
	public abstract boolean existsDestinationDBProfile();
	
	/**
	 * Gets the content of simple struct 'IdEntity'.
	 * @return Entity to achive identifier.
	 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
	 */
	public abstract Long getIdEntity()
	throws isf.servlets.InvalidRequest;
	
	/**
	 * Checks if exists simple structure 'IdEntity'.
	 * @return true if exists simple structure 'IdEntity'; false if not.
	 */
	public abstract boolean existsIdEntity();
	
	/**
	 * Gets the content of simple struct 'Condition'.
	 * @return SQL where condition to identify initial rows.
	 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
	 */
	public abstract String getCondition()
	throws isf.servlets.InvalidRequest;
	
	/**
	 * Checks if exists simple structure 'Condition'.
	 * @return true if exists simple structure 'Condition'; false if not.
	 */
	public abstract boolean existsCondition();
	
	/**
	 * Gets the content of simple struct 'PreExecuteScript'.
	 * @return SQL script to run before actual archiving.
	 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
	 */
	public abstract String getPreExecuteScript()
	throws isf.servlets.InvalidRequest;
	
	/**
	 * Checks if exists simple structure 'PreExecuteScript'.
	 * @return true if exists simple structure 'PreExecuteScript'; false if not.
	 */
	public abstract boolean existsPreExecuteScript();
	
	/**
	 * Gets the content of simple struct 'IndDebug'.
	 * @return Indicates if debugging output is enabled.
	 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
	 */
	public abstract boolean getIndDebug()
	throws isf.servlets.InvalidRequest;
	
	/**
	 * Checks if exists simple structure 'IndDebug'.
	 * @return true if exists simple structure 'IndDebug'; false if not.
	 */
	public abstract boolean existsIndDebug();
	
	// ****************************************************************************
	// * Inner classes
	// ****************************************************************************
	
	/**
	 * Structure class for datatype 'ArchiveVariant' (This is the main class in the interface).
	 * @author pcal
	 * 
	 */
	@javax.annotation.Generated(value = "tools.genex.ExchangeDocumentGenerator", date="2016-06-20", comments="Generated by isfv10-genex version 10.21.02 from ARQv10 (Indra Software Labs)")
	public static class ArchiveVariant51344 extends isf.servlets.ExchangeStructure4
	{
		
		// ****************************************************************************
		// * Variables
		// ****************************************************************************
		/** Number of simple structures from the base class.  */
		private int nInitialSimpleDefinition;
		
		
		// ****************************************************************************
		// * Constructors
		// ****************************************************************************
		
		/**
		 * Initializes info about contained fields and structures.
		 * @param strName Name.
		 * @param bRepeatable Repetability indicator.
		 * @param bMandatory Mandatority indicator.
		 */
		protected ArchiveVariant51344(
			java.lang.String strName, 
			boolean bRepeatable, 
			boolean bMandatory
		)
		{
			super(strName, bRepeatable, bMandatory);
			
			// Simple structures initialization
			ExchangeVariable[] simpleDefinitions=
			{
				new ExchangeVariable_String("CodExecutionMode","Execution mode"),
				new ExchangeVariable_String("DestinationDBProfile","Destination database profile"),
				new ExchangeVariable_Long("IdEntity","Entity to achive identifier"),
				new ExchangeVariable_String("Condition","SQL where condition to identify initial rows"),
				new ExchangeVariable_String("PreExecuteScript","SQL script to run before actual archiving"),
				new ExchangeVariable_Boolean("IndDebug","Indicates if debugging output is enabled"),
			};
			this.nInitialSimpleDefinition=appendSimpleDefinitions(simpleDefinitions);
			
		}
		
		/**
		 * Initializes info about contained fields and structures, with default name and indicators.
		 */
		public ArchiveVariant51344()
		{
			this("ArchiveVariant",false,false);
			writeArranger(new StructureArrangerNudeImpl2(this));
		}
		
		// ****************************************************************************
		// * Methods
		// ****************************************************************************
		
		/**
		 * Gets the content of simple struct 'CodExecutionMode'.
		 * @return Execution mode.
		 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
		 */
		public String getCodExecutionMode()
		throws isf.servlets.InvalidRequest
		{
			return (String)readFieldValue(simpleDefinitions[this.nInitialSimpleDefinition+0],false);
		}
		
		/**
		 * Checks if exists simple structure 'CodExecutionMode'.
		 * @return true if exists simple structure 'CodExecutionMode'; false if not.
		 */
		public boolean existsCodExecutionMode()
		{
			try
			{
				return getCodExecutionMode()!=null;
			}
			catch (isf.servlets.InvalidRequest ex)
			{
				return false;
			}
		}
		
		/**
		 * Gets the content of simple struct 'DestinationDBProfile'.
		 * @return Destination database profile.
		 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
		 */
		public String getDestinationDBProfile()
		throws isf.servlets.InvalidRequest
		{
			return (String)readFieldValue(simpleDefinitions[this.nInitialSimpleDefinition+1],false);
		}
		
		/**
		 * Checks if exists simple structure 'DestinationDBProfile'.
		 * @return true if exists simple structure 'DestinationDBProfile'; false if not.
		 */
		public boolean existsDestinationDBProfile()
		{
			try
			{
				return getDestinationDBProfile()!=null;
			}
			catch (isf.servlets.InvalidRequest ex)
			{
				return false;
			}
		}
		
		/**
		 * Gets the content of simple struct 'IdEntity'.
		 * @return Entity to achive identifier.
		 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
		 */
		public Long getIdEntity()
		throws isf.servlets.InvalidRequest
		{
			return (Long)readFieldValue(simpleDefinitions[this.nInitialSimpleDefinition+2],false);
		}
		
		/**
		 * Checks if exists simple structure 'IdEntity'.
		 * @return true if exists simple structure 'IdEntity'; false if not.
		 */
		public boolean existsIdEntity()
		{
			try
			{
				return getIdEntity()!=null;
			}
			catch (isf.servlets.InvalidRequest ex)
			{
				return false;
			}
		}
		
		/**
		 * Gets the content of simple struct 'Condition'.
		 * @return SQL where condition to identify initial rows.
		 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
		 */
		public String getCondition()
		throws isf.servlets.InvalidRequest
		{
			return (String)readFieldValue(simpleDefinitions[this.nInitialSimpleDefinition+3],false);
		}
		
		/**
		 * Checks if exists simple structure 'Condition'.
		 * @return true if exists simple structure 'Condition'; false if not.
		 */
		public boolean existsCondition()
		{
			try
			{
				return getCondition()!=null;
			}
			catch (isf.servlets.InvalidRequest ex)
			{
				return false;
			}
		}
		
		/**
		 * Gets the content of simple struct 'PreExecuteScript'.
		 * @return SQL script to run before actual archiving.
		 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
		 */
		public String getPreExecuteScript()
		throws isf.servlets.InvalidRequest
		{
			return (String)readFieldValue(simpleDefinitions[this.nInitialSimpleDefinition+4],false);
		}
		
		/**
		 * Checks if exists simple structure 'PreExecuteScript'.
		 * @return true if exists simple structure 'PreExecuteScript'; false if not.
		 */
		public boolean existsPreExecuteScript()
		{
			try
			{
				return getPreExecuteScript()!=null;
			}
			catch (isf.servlets.InvalidRequest ex)
			{
				return false;
			}
		}
		
		/**
		 * Gets the content of simple struct 'IndDebug'.
		 * @return Indicates if debugging output is enabled.
		 * @exception isf.servlets.InvalidRequest If the value read is not valid for the struct.
		 */
		public boolean getIndDebug()
		throws isf.servlets.InvalidRequest
		{
			return ((Boolean)readFieldValue(simpleDefinitions[this.nInitialSimpleDefinition+5],true)).booleanValue();
		}
		
		/**
		 * Checks if exists simple structure 'IndDebug'.
		 * @return true if exists simple structure 'IndDebug'; false if not.
		 */
		public boolean existsIndDebug()
		{
			try
			{
				getIndDebug();
				return true;
			}
			catch (isf.servlets.InvalidRequest ex)
			{
				return false;
			}
		}
	}
}
